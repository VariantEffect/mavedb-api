from re import Match, Pattern
from typing import Callable, Mapping, Sequence, Tuple, Union

ENSEMBL_PREFIXES: Sequence[str]
ARRAYEXPRESS_CODES: Sequence[str]
doi_regexp: Pattern
handle_regexp: Pattern
arxiv_post_2007_regexp: Pattern
arxiv_pre_2007_regexp: Pattern
arxiv_post_2007_with_class_regexp: Pattern
hal_regexp: Pattern
ads_regexp: Pattern
pmcid_regexp: Pattern
pmid_regexp: Pattern
ark_suffix_regexp: Pattern
lsid_regexp: Pattern
orcid_urls: Sequence[str]
orcid_isni_ranges: Sequence[Tuple[int, int]]
gnd_regexp: Pattern
gnd_resolver_url: str
urn_resolver_url: str
sra_regexp: Pattern
bioproject_regexp: Pattern
biosample_regexp: Pattern
ensembl_regexp: Pattern
uniprot_regexp: Pattern
refseq_regexp: Pattern
genome_regexp: Pattern
geo_regexp: Pattern
arrayexpress_array_regexp: Pattern
arrayexpress_experiment_regexp: Pattern
ascl_regexp: Pattern
swh_regexp: Pattern
ror_regexp: Pattern
viaf_urls: Sequence[str]
viaf_regexp: Pattern

# actually from isbnlib
def is_isbn10(val: str) -> bool: ...
def is_isbn13(val: str) -> bool: ...

# all these should really return bool but a lot of them
# actually return a Match object or None
def is_isbn(val: str) -> bool: ...
def is_issn(val: str) -> bool: ...
def is_istc(val: str) -> bool: ...
def is_doi(val: str) -> Union[Match[str], None]: ...
def is_handle(val: str) -> Union[bool, None]: ...
def is_ean8(val: str) -> bool: ...
def is_ean13(val: str) -> bool: ...
def is_ean(val: str) -> bool: ...
def is_isni(val: str) -> bool: ...
def is_orcid(val: str) -> bool: ...
def is_ark(val: str) -> Union[Match[str], bool, None]: ...
def is_purl(val: str) -> bool: ...
def is_url(val: str) -> bool: ...
def is_lsid(val: str) -> Union[Match[str], bool, None]: ...
def is_urn(val: str) -> bool: ...
def is_ads(val: str) -> Union[Match[str], None]: ...
def is_arxiv_post_2007(val: str) -> Union[Match[str], None]: ...
def is_arxiv_pre_2007(val: str) -> Union[Match[str], None]: ...
def is_arxiv(val: str) -> Union[Match[str], None]: ...
def is_hal(val: str) -> Union[Match[str], None]: ...
def is_pmid(val: str) -> Union[Match[str], None]: ...
def is_pmcid(val: str) -> Union[Match[str], None]: ...
def is_gnd(val: str) -> Union[Match[str], None]: ...
def is_sra(val: str) -> Union[Match[str], None]: ...
def is_bioproject(val: str) -> Union[Match[str], None]: ...
def is_biosample(val: str) -> Union[Match[str], None]: ...
def is_ensembl(val: str) -> Union[Match[str], None]: ...
def is_uniprot(val: str) -> Union[Match[str], None]: ...
def is_refseq(val: str) -> Union[Match[str], None]: ...
def is_genome(val: str) -> Union[Match[str], None]: ...
def is_geo(val: str) -> Union[Match[str], None]: ...
def is_arrayexpress_array(val: str) -> Union[Match[str], None]: ...
def is_arrayexpress_experiment(val: str) -> Union[Match[str], None]: ...
def is_ascl(val: str) -> Union[Match[str], None]: ...
def is_swh(val: str) -> Union[Match[str], None]: ...
def is_ror(val: str) -> Union[Match[str], None]: ...
def is_viaf(val: str) -> bool: ...

PID_SCHEMES: Sequence[Tuple[str, Callable[[str], Union[Match[str], bool, None]]]]
SCHEME_FILTER: Sequence[Tuple[str, list[str]]]

def detect_identifier_schemes(val: str) -> list[str]: ...
def normalize_doi(val: str) -> str: ...
def normalize_handle(val: str) -> str: ...
def normalize_ads(val: str) -> str: ...
def normalize_orcid(val: str) -> str: ...
def normalize_gnd(val: str) -> str: ...
def normalize_urn(val: str) -> str: ...
def normalize_pmid(val: str) -> str: ...
def normalize_arxiv(val: str) -> str: ...
def normalize_hal(val: str) -> str: ...
def normalize_isbn(val: str) -> str: ...
def normalize_issn(val: str) -> str: ...
def normalize_ror(val: str): ...
def normalize_viaf(val: str) -> str: ...
def normalize_pid(val: str, scheme: str) -> str: ...

LANDING_URLS: Mapping[str, str]

def to_url(val: str, scheme: str, url_scheme: str = "http") -> str: ...

__version__: str
